package schemamatchings.meta.experiments;

//import hplus.gui.*;
//import hplus.util.ExceptionsHandeler;
import schemamatchings.ontobuilder.MatchingAlgorithms;
import schemamatchings.ontobuilder.OntoBuilderWrapper;
import schemamatchings.meta.agr.*;

import schemamatchings.util.FileChoosingUtilities;

import java.awt.*;
import java.util.*;
import javax.swing.*;

import com.modica.gui.AbsoluteConstraints;
import com.modica.gui.AbsoluteLayout;

import java.awt.event.*;

/**
 *
 * @author  hag
 */
public class MetaExperimentsGUI extends javax.swing.JFrame implements ActionListener,ItemListener{

    /** Creates new form Application */
    public MetaExperimentsGUI() {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        runButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        saveButton1 = new javax.swing.JButton();
        openExperimentDefinitionFileButton = new javax.swing.JButton();
        statisticsPanel = new javax.swing.JPanel();
        top1PercisionCheckbox = new javax.swing.JCheckBox();
        topKAvergaePercissionCheckbox = new javax.swing.JCheckBox();
        averageIterationsCheckbox = new javax.swing.JCheckBox();
        exactMappingFilepath = new javax.swing.JComboBox();
        loadExactMappingFile = new javax.swing.JButton();
        metaAlgorithmsPanel = new javax.swing.JPanel();
        hybridCheckbox = new javax.swing.JCheckBox();
        taCheckBox1 = new javax.swing.JCheckBox();
        mdCheckBox = new javax.swing.JCheckBox();
        mdbCheckBox = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        targetSchema = new javax.swing.JComboBox();
        candSchema = new javax.swing.JComboBox();
        pickTSchemaButton = new javax.swing.JButton();
        PickCSchemaButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        setpByParameter = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        kParameter1 = new javax.swing.JTextField();
        algorithmsPanel = new javax.swing.JPanel();
        slectedMatchAlgorithms = new javax.swing.JScrollPane();
        selectedMatchAlgorithms = new javax.swing.JList();
        allMatchAlgorithms1 = new javax.swing.JScrollPane();
        allmatchAlgorithmsList = new javax.swing.JList(MatchingAlgorithms.ALL_ALGORITHM_NAMES);
        removeMatchAlgorithmButton = new javax.swing.JButton();
        addMatchAlgorithmButton = new javax.swing.JButton();
        aggregatorsPanel = new javax.swing.JPanel();
        globalFAggrPanel = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        selectedGloalFAggrList = new javax.swing.JList();
        jScrollPane141 = new javax.swing.JScrollPane();
        allGlobalFAggrList = new javax.swing.JList(GlobalAggregatorTypes.ALL);
        addGFAButton = new javax.swing.JButton();
        removeGFAButton = new javax.swing.JButton();
        globalHAggrPanel = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane142 = new javax.swing.JScrollPane();
        allGlobalHAggrList = new javax.swing.JList(GlobalAggregatorTypes.ALL);
        jScrollPane1421 = new javax.swing.JScrollPane();
        selectedGloalHAggrList = new javax.swing.JList();
        removeGHAButton = new javax.swing.JButton();
        addGHAButton = new javax.swing.JButton();
        localFAggrPanel1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        allLocalFAggrList = new javax.swing.JList(LocalAggregatorTypes.ALL);
        jScrollPane12 = new javax.swing.JScrollPane();
        selectedlocalFAggrList = new javax.swing.JList();
        removeLFAButton = new javax.swing.JButton();
        addLFAButton = new javax.swing.JButton();
        localHAggrPanel = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        selectedlocalHAggrList = new javax.swing.JList();
        jScrollPane131 = new javax.swing.JScrollPane();
        allLocalHAggrList = new javax.swing.JList(LocalAggregatorTypes.ALL);
        removeLHAButton = new javax.swing.JButton();
        addLHAButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setTitle("Schema Matchings Meta Algorithms Experiments Tool - Created by Haggai Roitman January 2004");
        jPanel1.setLayout(new AbsoluteLayout());

        jToolBar1.setFloatable(false);
        runButton.setIcon(new javax.swing.ImageIcon("images/forward.gif"));
        runButton.setActionCommand("run");
        runButton.addActionListener(this);
        jToolBar1.add(runButton);

        stopButton.setIcon(new javax.swing.ImageIcon("images/delete.gif"));
        stopButton.setToolTipText("");
        jToolBar1.add(stopButton);

        saveButton1.setIcon(new javax.swing.ImageIcon("images/saveontology.gif"));
        saveButton1.setToolTipText("");
        jToolBar1.add(saveButton1);

        openExperimentDefinitionFileButton.setIcon(new javax.swing.ImageIcon("images/open.gif"));
        openExperimentDefinitionFileButton.setToolTipText("");
        jToolBar1.add(openExperimentDefinitionFileButton);

        jPanel1.add(jToolBar1, new AbsoluteConstraints(0, 2, 1000, 30));

        statisticsPanel.setLayout(new AbsoluteLayout());

        statisticsPanel.setBorder(new javax.swing.border.TitledBorder(null, "Experiment Statistics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        statisticsPanel.setToolTipText("");
        top1PercisionCheckbox.setText("Top-1 Precission");
        top1PercisionCheckbox.setToolTipText("");
        statisticsPanel.add(top1PercisionCheckbox, new AbsoluteConstraints(10, 20, 180, -1));

        topKAvergaePercissionCheckbox.setText("Top-K Average Percission");
        topKAvergaePercissionCheckbox.setToolTipText("");
        statisticsPanel.add(topKAvergaePercissionCheckbox, new AbsoluteConstraints(10, 50, 200, -1));

        averageIterationsCheckbox.setText("Average Iterations");
        averageIterationsCheckbox.setToolTipText("");
        statisticsPanel.add(averageIterationsCheckbox, new AbsoluteConstraints(10, 110, -1, -1));

        exactMappingFilepath.setToolTipText("");
        statisticsPanel.add(exactMappingFilepath, new AbsoluteConstraints(10, 80, 220, 20));

        loadExactMappingFile.setIcon(new javax.swing.ImageIcon("images/open.gif"));
        loadExactMappingFile.setActionCommand("load exact mapping");
        loadExactMappingFile.addActionListener(this);
        statisticsPanel.add(loadExactMappingFile, new AbsoluteConstraints(240, 80, 40, 30));

        jPanel1.add(statisticsPanel, new AbsoluteConstraints(0, 40, 370, 240));

        metaAlgorithmsPanel.setLayout(new AbsoluteLayout());

        metaAlgorithmsPanel.setBorder(new javax.swing.border.TitledBorder(null, "Meta Algorithms", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        metaAlgorithmsPanel.setToolTipText("");
        hybridCheckbox.setText("Hybrid Algorithm");
        hybridCheckbox.addItemListener(this);
        metaAlgorithmsPanel.add(hybridCheckbox, new AbsoluteConstraints(20, 110, -1, -1));

        taCheckBox1.setText("Threshold Algorithm");
        taCheckBox1.setToolTipText("");
        metaAlgorithmsPanel.add(taCheckBox1, new AbsoluteConstraints(20, 20, -1, -1));

        mdCheckBox.setText("Matrix Direct Algorithm");
        mdCheckBox.addItemListener(this);
        metaAlgorithmsPanel.add(mdCheckBox, new AbsoluteConstraints(20, 50, -1, -1));

        mdbCheckBox.setText("Matrix Direct with Bounding Algorithm");
        mdbCheckBox.addItemListener(this);
        metaAlgorithmsPanel.add(mdbCheckBox, new AbsoluteConstraints(20, 80, -1, -1));

        jPanel1.add(metaAlgorithmsPanel, new AbsoluteConstraints(370, 40, 320, 150));

        jPanel6.setLayout(new AbsoluteLayout());

        jPanel6.setBorder(new javax.swing.border.TitledBorder(null, "Schema", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        jLabel2.setText("Pick Target Schema:");
        jLabel2.setToolTipText("");
        jPanel6.add(jLabel2, new AbsoluteConstraints(20, 60, 170, -1));

        jLabel21.setText("Pick Candidate Schema:");
        jLabel21.setToolTipText("");
        jPanel6.add(jLabel21, new AbsoluteConstraints(20, 30, 170, -1));

        jPanel6.add(targetSchema, new AbsoluteConstraints(180, 60, 240, 20));

        jPanel6.add(candSchema, new AbsoluteConstraints(180, 30, 240, 20));

        pickTSchemaButton.setIcon(new javax.swing.ImageIcon("images/open.gif"));
        pickTSchemaButton.addActionListener(this);
        pickTSchemaButton.setActionCommand("pick TS");
        jPanel6.add(pickTSchemaButton, new AbsoluteConstraints(430, 60, -1, 20));

        PickCSchemaButton.setIcon(new javax.swing.ImageIcon("images/open.gif"));
        PickCSchemaButton.addActionListener(this);
        PickCSchemaButton.setActionCommand("pick CS");
        jPanel6.add(PickCSchemaButton, new AbsoluteConstraints(430, 30, 50, 20));

        jPanel1.add(jPanel6, new AbsoluteConstraints(370, 190, 560, 90));

        jPanel11.setLayout(new AbsoluteLayout());

        jPanel11.setBorder(new javax.swing.border.TitledBorder(null, "Top K Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        setpByParameter.setToolTipText("");
        jPanel11.add(setpByParameter, new AbsoluteConstraints(160, 70, 60, 20));

        jLabel1.setText("Step By Parameter:");
        jLabel1.setToolTipText("");
        jPanel11.add(jLabel1, new AbsoluteConstraints(20, 70, 130, 20));

        jLabel11.setText("Enter K Parameter:");
        jLabel11.setToolTipText("");
        jPanel11.add(jLabel11, new AbsoluteConstraints(20, 40, 130, 20));

        kParameter1.setToolTipText("");
        jPanel11.add(kParameter1, new AbsoluteConstraints(160, 40, 60, 20));

        jPanel1.add(jPanel11, new AbsoluteConstraints(690, 40, 240, 150));

        algorithmsPanel.setLayout(new AbsoluteLayout());

        algorithmsPanel.setBorder(new javax.swing.border.TitledBorder(null, "Schema Matching Algorithms", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        algorithmsPanel.setToolTipText("");
        slectedMatchAlgorithms.setViewportView(selectedMatchAlgorithms);

        algorithmsPanel.add(slectedMatchAlgorithms, new AbsoluteConstraints(540, 30, 360, 130));

        allmatchAlgorithmsList.setToolTipText("");
        allMatchAlgorithms1.setViewportView(allmatchAlgorithmsList);

        algorithmsPanel.add(allMatchAlgorithms1, new AbsoluteConstraints(30, 30, 390, 130));

        removeMatchAlgorithmButton.setText("<<<");
        removeMatchAlgorithmButton.setActionCommand("remove match algorithm");
        removeMatchAlgorithmButton.addActionListener(this);
        algorithmsPanel.add(removeMatchAlgorithmButton, new AbsoluteConstraints(450, 100, -1, -1));

        addMatchAlgorithmButton.setText(">>>");
        addMatchAlgorithmButton.setActionCommand("add match algorithm");
        addMatchAlgorithmButton.addActionListener(this);
        algorithmsPanel.add(addMatchAlgorithmButton, new AbsoluteConstraints(450, 60, -1, -1));

        jPanel1.add(algorithmsPanel, new AbsoluteConstraints(0, 280, 930, 180));

        aggregatorsPanel.setLayout(new AbsoluteLayout());

        aggregatorsPanel.setBorder(new javax.swing.border.TitledBorder(null, "Aggregators", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        aggregatorsPanel.setToolTipText("");
        globalFAggrPanel.setBorder(new javax.swing.border.TitledBorder(null, "Global F Aggregator", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        globalFAggrPanel.setToolTipText("");
        jPanel3.setLayout(new AbsoluteLayout());

        jScrollPane14.setViewportView(selectedGloalFAggrList);

        jPanel3.add(jScrollPane14, new AbsoluteConstraints(250, 10, 150, 100));

        jScrollPane141.setViewportView(allGlobalFAggrList);

        jPanel3.add(jScrollPane141, new AbsoluteConstraints(10, 10, 150, 100));

        addGFAButton.setText(">>");
        addGFAButton.setActionCommand("add GFA");
        addGFAButton.addActionListener(this);
        jPanel3.add(addGFAButton, new AbsoluteConstraints(170, 40, 50, -1));

        removeGFAButton.setText("<<");
        removeGFAButton.setActionCommand("remove GFA");
        removeGFAButton.addActionListener(this);
        jPanel3.add(removeGFAButton, new AbsoluteConstraints(170, 70, 50, -1));

        globalFAggrPanel.setViewportView(jPanel3);

        aggregatorsPanel.add(globalFAggrPanel, new AbsoluteConstraints(480, 20, 420, 140));

        globalHAggrPanel.setBorder(new javax.swing.border.TitledBorder(null, "Global H Aggregator", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        globalHAggrPanel.setToolTipText("");
        jPanel5.setLayout(new AbsoluteLayout());

        jScrollPane142.setViewportView(allGlobalHAggrList);

        jPanel5.add(jScrollPane142, new AbsoluteConstraints(10, 10, 150, 100));

        jScrollPane1421.setViewportView(selectedGloalHAggrList);

        jPanel5.add(jScrollPane1421, new AbsoluteConstraints(250, 10, 150, 100));

        removeGHAButton.setText("<<");
        removeGHAButton.setActionCommand("remove GHA");
        removeGHAButton.addActionListener(this);
        jPanel5.add(removeGHAButton, new AbsoluteConstraints(170, 70, 50, -1));

        addGHAButton.setText(">>");
        addGHAButton.setActionCommand("add GHA");
        addGHAButton.addActionListener(this);
        jPanel5.add(addGHAButton, new AbsoluteConstraints(170, 40, 50, -1));

        globalHAggrPanel.setViewportView(jPanel5);

        aggregatorsPanel.add(globalHAggrPanel, new AbsoluteConstraints(480, 160, 420, 140));

        localFAggrPanel1.setBorder(new javax.swing.border.TitledBorder(null, "Local f Aggregator", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        localFAggrPanel1.setToolTipText("");
        jPanel2.setLayout(new AbsoluteLayout());

        jScrollPane11.setViewportView(allLocalFAggrList);

        jPanel2.add(jScrollPane11, new AbsoluteConstraints(10, 10, 150, 100));

        jScrollPane12.setViewportView(selectedlocalFAggrList);

        jPanel2.add(jScrollPane12, new AbsoluteConstraints(230, 10, 150, 100));

        removeLFAButton.setText("<<");
        removeLFAButton.setActionCommand("remove LFA");
        removeLFAButton.addActionListener(this);
        jPanel2.add(removeLFAButton, new AbsoluteConstraints(170, 70, 50, -1));

        addLFAButton.setText(">>");
        addLFAButton.setActionCommand("add LFA");
        addLFAButton.addActionListener(this);
        jPanel2.add(addLFAButton, new AbsoluteConstraints(170, 40, 50, -1));

        localFAggrPanel1.setViewportView(jPanel2);

        aggregatorsPanel.add(localFAggrPanel1, new AbsoluteConstraints(20, 20, 400, 140));

        localHAggrPanel.setBorder(new javax.swing.border.TitledBorder(null, "Local h Aggregator", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        localHAggrPanel.setToolTipText("");
        jPanel4.setLayout(new AbsoluteLayout());

        jScrollPane13.setViewportView(selectedlocalHAggrList);

        jPanel4.add(jScrollPane13, new AbsoluteConstraints(230, 10, 150, 100));

        jScrollPane131.setViewportView(allLocalHAggrList);

        jPanel4.add(jScrollPane131, new AbsoluteConstraints(10, 10, 150, 100));

        removeLHAButton.setText("<<");
        removeLHAButton.setActionCommand("remove LHA");
        removeLHAButton.addActionListener(this);
        jPanel4.add(removeLHAButton, new AbsoluteConstraints(170, 70, 50, -1));

        addLHAButton.setText(">>");
        addLHAButton.setActionCommand("add LHA");
        addLHAButton.addActionListener(this);
        jPanel4.add(addLHAButton, new AbsoluteConstraints(170, 40, 50, -1));

        localHAggrPanel.setViewportView(jPanel4);

        aggregatorsPanel.add(localHAggrPanel, new AbsoluteConstraints(20, 160, 400, 140));

        jPanel1.add(aggregatorsPanel, new AbsoluteConstraints(0, 460, 930, 310));

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);
        saveAsMenuItem.setText("Save As ...");
        fileMenu.add(saveAsMenuItem);
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        editMenu.setText("Edit");
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);
        menuBar.add(editMenu);
        helpMenu.setText("Help");
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);
        menuBar.add(helpMenu);
        setJMenuBar(menuBar);
        selectedGloalHAggrList.setEnabled(false);
        selectedlocalHAggrList.setEnabled(false);
        allGlobalHAggrList.setEnabled(false);
        allLocalHAggrList.setEnabled(false);
        addLHAButton.setEnabled(false);
        removeLHAButton.setEnabled(false);
        addGHAButton.setEnabled(false);
        removeGHAButton.setEnabled(false);
        pack();

    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new MetaExperimentsGUI().show();
    }


    public void actionPerformed(ActionEvent action){
      if (action.getActionCommand().equals("add match algorithm")){
        if (!selectedMatchAlgorithmsValues.contains((String)allmatchAlgorithmsList.getSelectedValue())){
          selectedMatchAlgorithmsValues.add((String)allmatchAlgorithmsList.getSelectedValue());
          selectedMatchAlgorithms.setListData(selectedMatchAlgorithmsValues);
        }
      }
      else if (action.getActionCommand().equals("remove match algorithm")){
        if (selectedMatchAlgorithmsValues.contains((String)selectedMatchAlgorithms.getSelectedValue())){
          selectedMatchAlgorithmsValues.remove((String)selectedMatchAlgorithms.getSelectedValue());
          selectedMatchAlgorithms.setListData(selectedMatchAlgorithmsValues);
        }
      }
      else if (action.getActionCommand().equals("remove LFA")){
       if (selectedLocalFAggrValues.contains((String)selectedlocalFAggrList.getSelectedValue())){
         selectedLocalFAggrValues.remove((String)selectedlocalFAggrList.getSelectedValue());
         selectedlocalFAggrList.setListData(selectedLocalFAggrValues);
       }
      }
      else if (action.getActionCommand().equals("add LFA")){
       if (!selectedLocalFAggrValues.contains((String)allLocalFAggrList.getSelectedValue()) && selectedLocalFAggrValues.isEmpty()){
         if (((String)allLocalFAggrList.getSelectedValue()).equals(LocalAggregatorTypes.ALL[LocalAggregatorTypes.AVERAGE])){
           new ThresholdDialog(this,true,true).show();
         }
         else{
           selectedLocalFAggrValues.add((String)allLocalFAggrList.getSelectedValue());
           selectedlocalFAggrList.setListData(selectedLocalFAggrValues);
         }
       }
      }
      else if (action.getActionCommand().equals("remove GFA")){
       if (selectedGlobalFAggrValues.contains((String)selectedGloalFAggrList.getSelectedValue())){
         selectedGlobalFAggrValues.remove((String)selectedGloalFAggrList.getSelectedValue());
         selectedGloalFAggrList.setListData(selectedGlobalFAggrValues);
       }
      }
      else if (action.getActionCommand().equals("add GFA")){
       if (!selectedGlobalFAggrValues.contains((String)allGlobalFAggrList.getSelectedValue()) && selectedGlobalFAggrValues.isEmpty()){
         if (((String)allLocalFAggrList.getSelectedValue()).equals(LocalAggregatorTypes.ALL[LocalAggregatorTypes.AVERAGE])){
             new ThresholdDialog(this,true,false).show();
         }
         else{
           selectedGlobalFAggrValues.add((String)allGlobalFAggrList.getSelectedValue());
           selectedGloalFAggrList.setListData(selectedGlobalFAggrValues);
         }
       }
      }
      else if (action.getActionCommand().equals("remove LHA")){
      if (selectedLocalHAggrValues.contains((String)selectedlocalHAggrList.getSelectedValue())){
        selectedLocalHAggrValues.remove((String)selectedlocalHAggrList.getSelectedValue());
        selectedlocalHAggrList.setListData(selectedLocalHAggrValues);
      }
     }
     else if (action.getActionCommand().equals("add LHA")){
      if (!selectedLocalHAggrValues.contains((String)allLocalHAggrList.getSelectedValue()) && selectedLocalHAggrValues.isEmpty()){
        selectedLocalHAggrValues.add((String)allLocalHAggrList.getSelectedValue());
        selectedlocalHAggrList.setListData(selectedLocalHAggrValues);
      }
     }
     else if (action.getActionCommand().equals("remove GHA")){
      if (selectedGlobalHAggrValues.contains((String)selectedGloalHAggrList.getSelectedValue())){
        selectedGlobalHAggrValues.remove((String)selectedGloalHAggrList.getSelectedValue());
        selectedGloalHAggrList.setListData(selectedGlobalHAggrValues);
      }
     }
     else if (action.getActionCommand().equals("add GHA")){
      if (!selectedGlobalHAggrValues.contains((String)allGlobalHAggrList.getSelectedValue()) && selectedGlobalHAggrValues.isEmpty()){
        selectedGlobalHAggrValues.add((String)allGlobalHAggrList.getSelectedValue());
        selectedGloalHAggrList.setListData(selectedGlobalHAggrValues);
      }
     }
     else if (action.getActionCommand().equals("pick TS")){
         pickTargetXMLFileButtonPressed();
     }
     else if (action.getActionCommand().equals("pick CS")){
         pickCandXMLFileButtonPressed();
     }
     else if(action.getActionCommand().equals("load exact mapping")){
         pickExactMappingFileButtonPressed();
     }
     else if (action.getActionCommand().equals("run")){
       try{
       setEnabled(false);
       Experiment experiment = new Experiment(ob,this);
       boolean[] metaAlgorithms = new boolean[4];
       metaAlgorithms[0] = taCheckBox1.isSelected();
       metaAlgorithms[1] = mdCheckBox.isSelected();
       metaAlgorithms[2] = mdbCheckBox.isSelected();
       metaAlgorithms[3] = hybridCheckbox.isSelected();
       experiment.setRunAlgorithms(metaAlgorithms);
       String[] schemas = new String[2];
       schemas[0] = (String)candSchema.getSelectedItem();
       schemas[1] = (String)targetSchema.getSelectedItem();
       experiment.setSchemas(schemas);
       if (exactMappingFilepath.getSelectedIndex() != -1){
         experiment.loadExactMapping((String)exactMappingFilepath.getItemAt(exactMappingFilepath.getSelectedIndex()));
       }
       experiment.setK(Integer.parseInt(kParameter1.getText()),Integer.parseInt(setpByParameter.getText()));
       String[] matchAlgorithms = new String[selectedMatchAlgorithmsValues.size()];
       for (int i=0;i<selectedMatchAlgorithmsValues.size();i++){
         matchAlgorithms[i] = (String)selectedMatchAlgorithmsValues.get(i);
       }
       experiment.setMatchAlgorithms(matchAlgorithms);
       String[] aggr = new String[((mdbCheckBox.isSelected() || hybridCheckbox.isSelected())? 4: 2)];
       aggr[0] = (String)selectedLocalFAggrValues.firstElement();
       aggr[1] = (String)selectedGlobalFAggrValues.firstElement();
       if (mdbCheckBox.isSelected() || hybridCheckbox.isSelected()){
         aggr[2] = (String)selectedLocalHAggrValues.firstElement();
         aggr[3] = (String)selectedGlobalHAggrValues.firstElement();
       }
       experiment.setAggregators(aggr);
       experiment.setLocalAvgAggrThreshold(localAvgThreshold);
       experiment.setGlobalAvgAggrThreshold(globalAvgThreshold);
       experiment.runExperiment();
       setEnabled(true);
       }catch(Throwable e){
         e.printStackTrace();
         //exceptionHandler.handleException(false,this,"UnKnown Error During Experiment Run","Error");
         setEnabled(true);
       }
     }

    }

    public void itemStateChanged(ItemEvent item){

      if (item.getItem() instanceof JCheckBox){
        System.out.println("item event");
        JCheckBox checkbox = (JCheckBox)item.getItem();
        if (checkbox.getText().equals("Matrix Direct with Bounding Algorithm")){
          boolean enable = checkbox.isSelected() || hybridCheckbox.isSelected();
          selectedGloalHAggrList.setEnabled(enable);
          selectedlocalHAggrList.setEnabled(enable);
          allGlobalHAggrList.setEnabled(enable);
          allLocalHAggrList.setEnabled(enable);
          addLHAButton.setEnabled(enable);
          removeLHAButton.setEnabled(enable);
          addGHAButton.setEnabled(enable);
          removeGHAButton.setEnabled(enable);
        }
        else if(checkbox.getText().equals("Hybrid Algorithm")){
          boolean enable = checkbox.isSelected() || mdbCheckBox.isSelected();
          selectedGloalHAggrList.setEnabled(enable);
          selectedlocalHAggrList.setEnabled(enable);
          allGlobalHAggrList.setEnabled(enable);
          allLocalHAggrList.setEnabled(enable);
          addLHAButton.setEnabled(enable);
          removeLHAButton.setEnabled(enable);
          addGHAButton.setEnabled(enable);
          removeGHAButton.setEnabled(enable);
        }


      }
    }

    public void pickCandXMLFileButtonPressed(){
      FileChoosingUtilities.openFileChoser(this,"Pick up Candidate Ontology XML file");
      if (FileChoosingUtilities.isFileChosed()){
        candidateXMLFiles.put(FileChoosingUtilities.getChoseFile().getName(),FileChoosingUtilities.getChoseFile());
        tempCandidateXMLFiles.addFirst(FileChoosingUtilities.getChoseFile().getName());
        refreshCandFilesListView();
      }
    }

    public void pickExactMappingFileButtonPressed(){
      FileChoosingUtilities.openFileChoser(this,"Pick up Exact Mapping XML file");
      if (FileChoosingUtilities.isFileChosed()){
        exactMappingXMLFiles.put(FileChoosingUtilities.getChoseFile().getName(),FileChoosingUtilities.getChoseFile());
        tempExactMappingXMLFiles.addFirst(FileChoosingUtilities.getChoseFile().getName());
        refreshExactMappingFilesListView();
      }
    }

    public void refreshExactMappingFilesListView(){
      exactMappingFilepath.removeAllItems(); // remove old values
      Iterator it = tempExactMappingXMLFiles.iterator();
      while(it.hasNext()){
          exactMappingFilepath.addItem(it.next());
      }
    }


    public void refreshCandFilesListView(){
       candSchema.removeAllItems(); // remove old values
      Iterator it = tempCandidateXMLFiles.iterator();
      while(it.hasNext()){
         candSchema.addItem(it.next());
      }
    }

    public void refreshTargetFilesListView(){
      targetSchema.removeAllItems(); // remove old values
      Iterator it = tempTargetXMLFiles.iterator();
      while(it.hasNext()){
        targetSchema.addItem(it.next());
      }
    }

    public void setAvgAggrThreshold(double threshold,boolean local){
      if (local){
        localAvgThreshold = threshold;
        selectedLocalFAggrValues.add((String)allLocalFAggrList.getSelectedValue());
        selectedlocalFAggrList.setListData(selectedLocalFAggrValues);
      }
      else{
        globalAvgThreshold = threshold;
        selectedGlobalFAggrValues.add((String)allGlobalFAggrList.getSelectedValue());
        selectedGloalFAggrList.setListData(selectedGlobalFAggrValues);
      }
    }

 public void pickTargetXMLFileButtonPressed(){
   FileChoosingUtilities.openFileChoser(this,"Pick up Target Ontology XML file");
   if (FileChoosingUtilities.isFileChosed()){
     targetXMLFiles.put(FileChoosingUtilities.getChoseFile().getName(),FileChoosingUtilities.getChoseFile());
     tempTargetXMLFiles.addFirst(FileChoosingUtilities.getChoseFile().getName());
     refreshTargetFilesListView();
    }
  }

    // Variables declaration - do not modify
    private javax.swing.JList selectedGloalHAggrList;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JList selectedGloalFAggrList;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBox topKAvergaePercissionCheckbox;
    private javax.swing.JButton PickCSchemaButton;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JTextField kParameter1;
    private javax.swing.JButton loadExactMappingFile;
    private javax.swing.JScrollPane globalHAggrPanel;
    private javax.swing.JList selectedMatchAlgorithms;
    private javax.swing.JCheckBox mdbCheckBox;
    private javax.swing.JScrollPane slectedMatchAlgorithms;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JTextField setpByParameter;
    private javax.swing.JCheckBox hybridCheckbox;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JPanel aggregatorsPanel;
    private javax.swing.JCheckBox mdCheckBox;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JButton addLHAButton;
    private javax.swing.JComboBox candSchema;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton removeLHAButton;
    private javax.swing.JButton addGHAButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton removeGHAButton;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JCheckBox top1PercisionCheckbox;
    private javax.swing.JButton addMatchAlgorithmButton;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel metaAlgorithmsPanel;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane localFAggrPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane localHAggrPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane142;
    private javax.swing.JScrollPane globalFAggrPanel;
    private javax.swing.JScrollPane jScrollPane141;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JList allLocalHAggrList;
    private javax.swing.JList allLocalFAggrList;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JButton pickTSchemaButton;
    private javax.swing.JPanel statisticsPanel;
    private javax.swing.JButton removeMatchAlgorithmButton;
    private javax.swing.JButton runButton;
    private javax.swing.JButton addLFAButton;
    private javax.swing.JCheckBox averageIterationsCheckbox;
    private javax.swing.JButton removeLFAButton;
    private javax.swing.JList allGlobalHAggrList;
    private javax.swing.JButton addGFAButton;
    private javax.swing.JComboBox targetSchema;
    private javax.swing.JList allGlobalFAggrList;
    private javax.swing.JScrollPane jScrollPane131;
    private javax.swing.JButton removeGFAButton;
    private javax.swing.JComboBox exactMappingFilepath;
    private javax.swing.JScrollPane allMatchAlgorithms1;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton openExperimentDefinitionFileButton;
    private javax.swing.JList selectedlocalHAggrList;
    private javax.swing.JList allmatchAlgorithmsList;
    private javax.swing.JList selectedlocalFAggrList;
    private javax.swing.JButton saveButton1;
    private javax.swing.JScrollPane jScrollPane1421;
    private javax.swing.JCheckBox taCheckBox1;
    private javax.swing.JPanel algorithmsPanel;

    private Vector selectedMatchAlgorithmsValues = new Vector();
    private Vector selectedLocalFAggrValues = new Vector();
    private Vector selectedLocalHAggrValues = new Vector();
    private Vector selectedGlobalFAggrValues = new Vector();
    private Vector selectedGlobalHAggrValues = new Vector();
    private LinkedList tempCandidateXMLFiles = new LinkedList();
    private LinkedList tempTargetXMLFiles = new LinkedList();
    private LinkedList tempExactMappingXMLFiles = new LinkedList();
    private Hashtable candidateXMLFiles = new Hashtable();
    private Hashtable targetXMLFiles = new Hashtable();
    private Hashtable exactMappingXMLFiles = new Hashtable();
    private OntoBuilderWrapper ob = new OntoBuilderWrapper();
    //private ExceptionsHandeler exceptionHandler = new ExceptionsHandeler();
    private double localAvgThreshold = 0;
    private double globalAvgThreshold = 0;
    // End of variables declaration

}
