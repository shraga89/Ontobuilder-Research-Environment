package ac.technion.schemamatching.util.ce;

import java.util.Arrays;
import java.util.Comparator;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

import ac.technion.schemamatching.matchers.secondline.OBSample;
import ac.technion.schemamatching.util.ce.CESample;


/**
 * A generic stochastic optimization utility based on the Cross Entropy Method
 * @see http://iew3.technion.ac.il/CE/
 */
public class CrossEntropyOptimizer{

	/* Sample size */
	protected int N = 10000;
	/* ro parameters - controls the "elite" sample size for adaptive learning */
	protected double ro = 0.01;
	/* sampling pool */
	protected CESample[] samples;
	protected ForkJoinPool fkPool;

	/* Stopping criterion parameters 
	 * Counts number of iterations with no change in CE run 
	 * Specifies how many runs to count with have the same outcome to count for
	 * stopping
	 */
	protected int stopParameter;
	/* Counts number of max. iterations CE is allowed to run */
	protected final int MAX_ITERATIONS = 1000;
	
	/* verbose flag */
	public static boolean verbose = true;
	
	/**
	 * A bean that holds the result of CE optimizer
	 */
	public class CEOptimizationResult{

		public final CESample bestSample;
		public final int numIterations;
		public final long time;

		public CEOptimizationResult(CESample bestSample, int numIterations, long time) {
			this.bestSample = bestSample;
			this.numIterations = numIterations;
			this.time = time;
		}

	}


	/**
	 * Creates a new CE optimizer instance
	 * @param sampleSize same size
	 * @param ro adaptive learning parameter
	 * @param stopAfter stopping criterion
	 * @param numSamplerThreads num sampling threads
	 */
	public CrossEntropyOptimizer(int sampleSize, double ro, int stopAfter) {
		this.ro = ro;
		this.N = sampleSize;
		this.stopParameter = stopAfter;
		this.samples = new CESample[sampleSize];//sample pool
		int poolSize = 2 * Runtime.getRuntime().availableProcessors();
		if (verbose) System.out.println("CE Workers pool size: "+poolSize);
		this.fkPool = new ForkJoinPool(poolSize);
	}
	

	/**
	 * Executes the CE optimization
	 * @param objective objective function to optimize
	 * @param model solution space model
	 * @return optimization result
	 */
	public CEOptimizationResult optimize(CEObjective objective, CEModel model) {
		long time = System.currentTimeMillis();
		model.maxEntropy();
		/* Keeps the best sample by far */
		CESample bestSample = null;
		int numOfTheSameOutcome = 0;
		int t = 1;// iteration counter
		/* Holds the last calculated gammaT */
		double lastGammaT = -1;

		while (true) {
			// draw samples
			drawRandomSamples(model,N, objective);
			//sort samples by objective value
			sortSamplesByObjective(objective);
			//keep the best intermediate sample
			CESample currentBest = samples[samples.length - 1];
			bestSample = updateBestSample(bestSample, currentBest, objective);
			// calculate gammaT parameter
			double gammaT = calculateGammaT(samples);
			// update model
			model.update(gammaT, samples, objective, fkPool);
			//check stop criterion
			StopCriterionResult check = isStopReached(objective, currentBest.getValue(),lastGammaT,t,numOfTheSameOutcome);
			if (check.canStop){
				break;
			}else{
				lastGammaT = check.lastGammaT;
				numOfTheSameOutcome = check.numOfTheSameOutcome;
			}

			t++;
		}
		

		return new CEOptimizationResult(bestSample,t,System.currentTimeMillis() - time);
	}

    /**
     * Draws a random sample of a given size from a given solution space model
     * @param model solution space model
     * @param size sample size
     * @return sample
     */
	public void drawRandomSamples(CEModel model, int size, CEObjective objective){
		// draw samples in parallel
		int numTasks = samples.length;
		SamplingTask[] samplers = new SamplingTask[numTasks];
		for (int i=0;i<numTasks;i++) {
			samplers[i] = new SamplingTask(model, objective, samples, i);
			fkPool.execute(samplers[i]);
		}
		
		for (SamplingTask sampler : samplers) {
			sampler.join();
		}
	}


	
	protected double calculateGammaT(CESample[] sample){
		CESample s = sample[((int) Math.floor((1 - ro)* N))];
		return s.getValue();
	}

	protected void sortSamplesByObjective(CEObjective objective) {
		Arrays.parallelSort(samples, new CESampleComparator(objective.isMaximized()));
	}


	protected StopCriterionResult isStopReached(CEObjective objective, double localOptima, double lastGammaT, int t, int numOfTheSameOutcome){
		if (t ==  MAX_ITERATIONS) return new StopCriterionResult(true,lastGammaT,numOfTheSameOutcome);
		//algorithm stop condition check
		if (objective.isMaximized() ? localOptima <= lastGammaT : localOptima >= lastGammaT) {
			numOfTheSameOutcome++;
			if (verbose) System.out.print(".");
		} else {//
			numOfTheSameOutcome = 0;
			lastGammaT = localOptima;
			if (verbose) System.out.println(localOptima);
		}

		if (numOfTheSameOutcome == stopParameter){
			return new StopCriterionResult(true,lastGammaT,numOfTheSameOutcome);// simulation finished...
		} else{
			return new StopCriterionResult(false,lastGammaT,numOfTheSameOutcome);
		}
	}



	protected CESample updateBestSample(CESample bestSample, CESample bestIterationSample, CEObjective objective){
		if (bestSample == null || (objective.isMaximized() && bestSample.getValue() < bestIterationSample.getValue()) ||
				(!objective.isMaximized() && bestSample.getValue() > bestIterationSample.getValue())){
			return bestIterationSample;
		}else{
			return bestSample;
		}
	}


	class CESampleComparator implements Comparator<CESample>{

		private boolean max;

		CESampleComparator(boolean max){
			this.max = max;
		}

		@Override
		public int compare(CESample s1, CESample s2) {
			if (s1.getValue() > s2.getValue()) return max ? 1 : -1;
			if (s1.getValue() < s2.getValue()) return max ? -1 : 1;
			else return 0;
		}

	}


	class StopCriterionResult{

		final boolean canStop;
		final double lastGammaT;
		final int numOfTheSameOutcome;

		StopCriterionResult(boolean canStop, double lastGammaT, int numOfTheSameOutcome) {
			this.canStop = canStop;
			this.lastGammaT = lastGammaT;
			this.numOfTheSameOutcome = numOfTheSameOutcome;
		}	

	}

	
	class SamplingTask extends RecursiveTask<CESample[]>{
		private static final long serialVersionUID = 2214804391417173438L;
		
		private CEModel model;
		private CEObjective objective;
		private CESample[] samples;
		private int inx;

		public SamplingTask(CEModel model, CEObjective objective,
				CESample[] samples, int inx) {
			super();
			this.model = model;
			this.objective = objective;
			this.samples = samples;
			this.inx = inx;
		}


		@Override
		protected CESample[] compute() {
			CESample s = model.drawRandomSample();
			s.setValue(objective.evaluate(s));
			samples[inx] = s;
			return samples;
		}

	}
	
	public void close() {
		if (fkPool != null) fkPool.shutdown();
	}



}
