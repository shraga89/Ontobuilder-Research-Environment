package schemamatchings.test;

import java.util.LinkedList;
import java.util.Vector;

public class Test1FileResult {
  private int totalExactMatches;
  protected Vector k_CorrectResults;
  private LinkedList changes ;
  private boolean printChanges = false;


  public Test1FileResult(int totalExactMatches,Vector correctResults) {
    this.totalExactMatches = totalExactMatches ;
    this.k_CorrectResults = correctResults ;
  }

  /**
   * used for test6. k_CorrectResults is used as a vector containing MatchedPairData
   * items corresponding to the terms found at k=1 .
   * @param totalExactMatches int number of exact matches
   * @param firstTerms Vector a Vector containing MatchedPairData objects corresponding to the terms found at k=1
   * @param _changes LinkedList a list of MatchedPairData objects representing all the changes found
   * by different Ks, by the order of their appearance.
   */
  public Test1FileResult(int totalExactMatches,Vector firstTerms, LinkedList _changes) {
    this.totalExactMatches = totalExactMatches ;
    this.k_CorrectResults = firstTerms;
    this.changes = _changes ;
  }

  public Test1FileResult(int totalExactMatches,Vector correctResults,boolean printCh) {
    this(totalExactMatches,correctResults);
    this.printChanges=printCh;
  }


  public String print(){
    String result = new String ();
    result = result.concat("Total Exact Matches: " + totalExactMatches + "\n");
    for (int i = 0 ; i < this.k_CorrectResults.size() ; i++)
      result = result.concat(i+"="+this.k_CorrectResults.get(i)+" ");
    result = result.concat("\n");
    return result;
  }

  public String printForFile1() {
    String result = new String("TotalExactMatches\t"+totalExactMatches + "\n");
    for (int i = 0 ; i < this.k_CorrectResults.size() ; i++)
  /*     result = result.concat("\t" + i + "\t" + this.k_CorrectResults.get(i) + "\t" +
                              ((Integer)(k_CorrectResults.get(i))).floatValue()/(float)totalExactMatches*100.0 + "\n" );
    */
   result = result.concat("\t" + ((kResult)this.k_CorrectResults.get(i)).toString1() + "\t" +
                         ((kResult)(k_CorrectResults.get(i))).getTotalCorrectFloat()/totalExactMatches*100.0 + "\n" );

    return result;
  }

  /*  Returns a String used for the file output, when this class is used for experiment 2/3
      */
  public String printForFile2() {
//    String result = new String("\tK Value\tPercentage True\tPercentage Of Total Correct\tWeight Of True Matches\n");
    String result = new String("\tK Value\tPercent Found Correct\tDetail\tWeight Of True Matches\tPercentage Of Total Correct\n");
   for (int i = 0 ; i < this.k_CorrectResults.size() ; i++)
  result = result.concat("\t"+(i+1)+"\t" +floor2(((kResult)(k_CorrectResults.get(i))).getTotalCorrectFloat()/totalExactMatches*100.0) +
                         "\t(" + ((kResult)(k_CorrectResults.get(i))).getTotalCorrect() + "/" + totalExactMatches +
                         ")\n"+((kResult)this.k_CorrectResults.get(i)).printList()  );

   return result;
  }


  /*  Returns a String used for the file output, when this class is used for experiment 4    */
  public String printForFile4() {
    String result = new String("");
   for (int i = 0 ; i < this.k_CorrectResults.size() ; i++){
     result = result.concat(((kResult)this.k_CorrectResults.get(i)).printList4()  );
   }
   return result;
  }

  public String printForFile4_2() {
    String result = new String("\tK Value\tIs Exact\tCandidate\tTarget\tNumber Appeared\tPercent\n");
    for (int i = 0 ; i < this.k_CorrectResults.size() ; i++){
      result = result.concat("\t"+(i+1)+"\n"+((kResult)this.k_CorrectResults.get(i)).printList4_2()  );
    }
    return result;
  }
  public static double floor2(double f){
    double g = f % 0.01 ;
    if (g<0.005)
      return f-g ;
    else
      return f-g+0.01;
  }

  /**
   * This method will print the results of a specific algorithm (term or combined for example) for
   * a given file match, for threshold analysis. For each K, and for each threshold value, it will
   * print the precision and recall of the Match generated by only using the matches which appear in
   * 'threshold' number of times in the previous K mappings up to the current K match.
   * If the parameter printOnlyLast is passed, it will only print for the last K=10 Match.
   * If the boolean printChanges is set to true then it will also print for each k/threshold combination
   * the change in threshold and precision relative to the previous threshold.
   * constructing this object, then it will also print for each
   * @return String
   */
  public String printForFile_ThresholdAnalysis(){
    return printForFile_ThresholdAnalysis(false);
  }

  public String printForFile_ThresholdAnalysis(boolean printOnlyLast){
    StringBuffer result = new StringBuffer();
    kResult tempK;
    if (printChanges)
      result.append("\tK Value\tThreshold\tCorrect\tIncorrect\tPrecision\tRecall\tPrecision Change\tRecall Change\n");
    else
      result.append("\tK Value\tThreshold\tCorrect\tIncorrect\tPrecision\tRecall\n");
    int beginPrint = 0;
    if (printOnlyLast)
      beginPrint = 9 ;
    for (int i = beginPrint ; i < this.k_CorrectResults.size() ; i++){
      tempK = (kResult)this.k_CorrectResults.get(i);
      result.append("\t"+tempK.getK()+"\n"+tempK.printThresholdAnalysis(totalExactMatches,printChanges)  );
   }
   return result.toString();

  }

  public String printForFile_Changes(){
    StringBuffer result = new StringBuffer();
    MatchedPairData mpd ;
    int count = 1;
    result.append("\tIs Original\tChange Number\tCandidate\tTarget\tIs Correct\n");
    for (int i = 0 ; i < this.k_CorrectResults.size() ; i++){
      mpd = (MatchedPairData)k_CorrectResults.get(i);
      result.append("\t1\t"+(count++)+"\t"+mpd.attribute1+"\t"+mpd.attribute2+"\t"+mpd.isCorrectInt()+"\n" );
    }
    for (int i = 0 ; i < this.changes.size() ; i++){
      mpd = (MatchedPairData)changes.get(i);
      result.append("\t0\t"+(count++)+"\t"+mpd.attribute1+"\t"+mpd.attribute2+"\t"+mpd.isCorrectInt()+"\n" );
    }

   return result.toString();

  }


  public int getExactCount(){
    return totalExactMatches ;
  }

  // returns the number of correct matches for k=10, threshold=1
  public int getFirstTotalCorrect(){
    kResult krslt = ((kResult)this.k_CorrectResults.get(9));
    return krslt.totalCorrectMatchesAboveIntThreshold(1);
  }

}
